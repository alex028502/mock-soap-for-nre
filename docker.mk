# different make file since it wouldn't make a lot of sense to run this in the container
SHELL=/bin/bash #thanks http://stackoverflow.com/a/589300/5203563
IMAGE_NAME=fake-server-project

.PHONY: build run compare run-interactively run-test

build: .dockerignore
	docker build -t $(IMAGE_NAME) .
.dockerignore:
	echo "# autogenerated file - do not edit" > $@
	echo "# create list of generated files from .gitignore" >> $@
	echo "# only really matters when running locally" >> $@
	echo "" >> $@
	echo "# .gitignore" >> $@
	cat .gitignore | bash deployment/translate-ignore.sh >> $@
	echo "" >> $@
	echo "# example/.gitignore" >> $@
	cat example/.gitignore | bash deployment/translate-ignore.sh | awk '{ print "example"$$0}' >> $@
	echo "" >> $@
	echo "# mock-server/.gitignore" >> $@
	cat mock-server/.gitignore | bash deployment/translate-ignore.sh | awk '{ print "mock-server"$$0}' >> $@
test: build
	docker run $(IMAGE_NAME) #test is the default command
interactive: build
	docker run -i -t $(IMAGE_NAME) /bin/bash
compare: build
	#this compares the version information for on the dev machine and the docker image used
	#for continuous intergration.  I used it to figure out why something is passing on travis but not
	#working locally, or working locally but not passing on travis.
	#python --version seems to output to stderr, so we combin stderr and stdout for comparison
	docker run $(IMAGE_NAME) /bin/bash /src/deployment/list-versions.sh 2>&1 | diff - <(bash deployment/list-versions.sh 2>&1) && echo looks like versions match
